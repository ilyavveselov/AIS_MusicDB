#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Veselov_AIS")]
	public partial class MusicMixModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAlbum(Album instance);
    partial void UpdateAlbum(Album instance);
    partial void DeleteAlbum(Album instance);
    partial void InsertAlbumType(AlbumType instance);
    partial void UpdateAlbumType(AlbumType instance);
    partial void DeleteAlbumType(AlbumType instance);
    partial void InsertArtist(Artist instance);
    partial void UpdateArtist(Artist instance);
    partial void DeleteArtist(Artist instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertLabelName(LabelName instance);
    partial void UpdateLabelName(LabelName instance);
    partial void DeleteLabelName(LabelName instance);
    partial void InsertSong(Song instance);
    partial void UpdateSong(Song instance);
    partial void DeleteSong(Song instance);
    partial void InsertMusicMix(MusicMix instance);
    partial void UpdateMusicMix(MusicMix instance);
    partial void DeleteMusicMix(MusicMix instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertOldMusicMix(OldMusicMix instance);
    partial void UpdateOldMusicMix(OldMusicMix instance);
    partial void DeleteOldMusicMix(OldMusicMix instance);
    #endregion
		
		public MusicMixModelDataContext() : 
				base(global::WindowsFormsApp1.Properties.Settings.Default.Veselov_AISConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MusicMixModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicMixModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicMixModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicMixModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Album> Album
		{
			get
			{
				return this.GetTable<Album>();
			}
		}
		
		public System.Data.Linq.Table<AlbumType> AlbumType
		{
			get
			{
				return this.GetTable<AlbumType>();
			}
		}
		
		public System.Data.Linq.Table<Artist> Artist
		{
			get
			{
				return this.GetTable<Artist>();
			}
		}
		
		public System.Data.Linq.Table<Country> Country
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genre
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<LabelName> LabelName
		{
			get
			{
				return this.GetTable<LabelName>();
			}
		}
		
		public System.Data.Linq.Table<Song> Song
		{
			get
			{
				return this.GetTable<Song>();
			}
		}
		
		public System.Data.Linq.Table<MusicMix> MusicMix
		{
			get
			{
				return this.GetTable<MusicMix>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<OldMusicMix> OldMusicMix
		{
			get
			{
				return this.GetTable<OldMusicMix>();
			}
		}
		
		public System.Data.Linq.Table<Album_View> Album_View
		{
			get
			{
				return this.GetTable<Album_View>();
			}
		}
		
		public System.Data.Linq.Table<Song_View> Song_View
		{
			get
			{
				return this.GetTable<Song_View>();
			}
		}
		
		public System.Data.Linq.Table<AlbumType_View> AlbumType_View
		{
			get
			{
				return this.GetTable<AlbumType_View>();
			}
		}
		
		public System.Data.Linq.Table<Country_View> Country_View
		{
			get
			{
				return this.GetTable<Country_View>();
			}
		}
		
		public System.Data.Linq.Table<Genre_View> Genre_View
		{
			get
			{
				return this.GetTable<Genre_View>();
			}
		}
		
		public System.Data.Linq.Table<LabelName_View> LabelName_View
		{
			get
			{
				return this.GetTable<LabelName_View>();
			}
		}
		
		public System.Data.Linq.Table<List_View> List_View
		{
			get
			{
				return this.GetTable<List_View>();
			}
		}
		
		public System.Data.Linq.Table<MusicMix_View> MusicMix_View
		{
			get
			{
				return this.GetTable<MusicMix_View>();
			}
		}
		
		public System.Data.Linq.Table<Artist_View> Artist_View
		{
			get
			{
				return this.GetTable<Artist_View>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Album")]
	public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _albId;
		
		private System.Guid _albArtistId;
		
		private string _albName;
		
		private System.DateTime _albReleaseDate;
		
		private System.Guid _albTypeId;
		
		private System.Guid _albLabelId;
		
		private System.Nullable<System.Guid> _albGenreId;
		
		private EntitySet<Song> _Song;
		
		private EntitySet<MusicMix> _MusicMix;
		
		private EntityRef<AlbumType> _AlbumType;
		
		private EntityRef<Artist> _Artist;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<LabelName> _LabelName;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnalbIdChanging(System.Guid value);
    partial void OnalbIdChanged();
    partial void OnalbArtistIdChanging(System.Guid value);
    partial void OnalbArtistIdChanged();
    partial void OnalbNameChanging(string value);
    partial void OnalbNameChanged();
    partial void OnalbReleaseDateChanging(System.DateTime value);
    partial void OnalbReleaseDateChanged();
    partial void OnalbTypeIdChanging(System.Guid value);
    partial void OnalbTypeIdChanged();
    partial void OnalbLabelIdChanging(System.Guid value);
    partial void OnalbLabelIdChanged();
    partial void OnalbGenreIdChanging(System.Nullable<System.Guid> value);
    partial void OnalbGenreIdChanged();
    #endregion
		
		public Album()
		{
			this._Song = new EntitySet<Song>(new Action<Song>(this.attach_Song), new Action<Song>(this.detach_Song));
			this._MusicMix = new EntitySet<MusicMix>(new Action<MusicMix>(this.attach_MusicMix), new Action<MusicMix>(this.detach_MusicMix));
			this._AlbumType = default(EntityRef<AlbumType>);
			this._Artist = default(EntityRef<Artist>);
			this._Genre = default(EntityRef<Genre>);
			this._LabelName = default(EntityRef<LabelName>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid albId
		{
			get
			{
				return this._albId;
			}
			set
			{
				if ((this._albId != value))
				{
					this.OnalbIdChanging(value);
					this.SendPropertyChanging();
					this._albId = value;
					this.SendPropertyChanged("albId");
					this.OnalbIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albArtistId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid albArtistId
		{
			get
			{
				return this._albArtistId;
			}
			set
			{
				if ((this._albArtistId != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalbArtistIdChanging(value);
					this.SendPropertyChanging();
					this._albArtistId = value;
					this.SendPropertyChanged("albArtistId");
					this.OnalbArtistIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string albName
		{
			get
			{
				return this._albName;
			}
			set
			{
				if ((this._albName != value))
				{
					this.OnalbNameChanging(value);
					this.SendPropertyChanging();
					this._albName = value;
					this.SendPropertyChanged("albName");
					this.OnalbNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albReleaseDate", DbType="Date NOT NULL")]
		public System.DateTime albReleaseDate
		{
			get
			{
				return this._albReleaseDate;
			}
			set
			{
				if ((this._albReleaseDate != value))
				{
					this.OnalbReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._albReleaseDate = value;
					this.SendPropertyChanged("albReleaseDate");
					this.OnalbReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid albTypeId
		{
			get
			{
				return this._albTypeId;
			}
			set
			{
				if ((this._albTypeId != value))
				{
					if (this._AlbumType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalbTypeIdChanging(value);
					this.SendPropertyChanging();
					this._albTypeId = value;
					this.SendPropertyChanged("albTypeId");
					this.OnalbTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albLabelId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid albLabelId
		{
			get
			{
				return this._albLabelId;
			}
			set
			{
				if ((this._albLabelId != value))
				{
					if (this._LabelName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalbLabelIdChanging(value);
					this.SendPropertyChanging();
					this._albLabelId = value;
					this.SendPropertyChanged("albLabelId");
					this.OnalbLabelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albGenreId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> albGenreId
		{
			get
			{
				return this._albGenreId;
			}
			set
			{
				if ((this._albGenreId != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalbGenreIdChanging(value);
					this.SendPropertyChanging();
					this._albGenreId = value;
					this.SendPropertyChanged("albGenreId");
					this.OnalbGenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Song", Storage="_Song", ThisKey="albId", OtherKey="songAlbumId")]
		public EntitySet<Song> Song
		{
			get
			{
				return this._Song;
			}
			set
			{
				this._Song.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_MusicMix", Storage="_MusicMix", ThisKey="albId", OtherKey="musicMixAlbumId")]
		public EntitySet<MusicMix> MusicMix
		{
			get
			{
				return this._MusicMix;
			}
			set
			{
				this._MusicMix.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlbumType_Album", Storage="_AlbumType", ThisKey="albTypeId", OtherKey="albTypeId", IsForeignKey=true)]
		public AlbumType AlbumType
		{
			get
			{
				return this._AlbumType.Entity;
			}
			set
			{
				AlbumType previousValue = this._AlbumType.Entity;
				if (((previousValue != value) 
							|| (this._AlbumType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AlbumType.Entity = null;
						previousValue.Album.Remove(this);
					}
					this._AlbumType.Entity = value;
					if ((value != null))
					{
						value.Album.Add(this);
						this._albTypeId = value.albTypeId;
					}
					else
					{
						this._albTypeId = default(System.Guid);
					}
					this.SendPropertyChanged("AlbumType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Album", Storage="_Artist", ThisKey="albArtistId", OtherKey="artId", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Album.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Album.Add(this);
						this._albArtistId = value.artId;
					}
					else
					{
						this._albArtistId = default(System.Guid);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Album", Storage="_Genre", ThisKey="albGenreId", OtherKey="genreId", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.Album.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.Album.Add(this);
						this._albGenreId = value.genreId;
					}
					else
					{
						this._albGenreId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabelName_Album", Storage="_LabelName", ThisKey="albLabelId", OtherKey="labelId", IsForeignKey=true)]
		public LabelName LabelName
		{
			get
			{
				return this._LabelName.Entity;
			}
			set
			{
				LabelName previousValue = this._LabelName.Entity;
				if (((previousValue != value) 
							|| (this._LabelName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabelName.Entity = null;
						previousValue.Album.Remove(this);
					}
					this._LabelName.Entity = value;
					if ((value != null))
					{
						value.Album.Add(this);
						this._albLabelId = value.labelId;
					}
					else
					{
						this._albLabelId = default(System.Guid);
					}
					this.SendPropertyChanged("LabelName");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Song(Song entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_Song(Song entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
		
		private void attach_MusicMix(MusicMix entity)
		{
			this.SendPropertyChanging();
			entity.Album = this;
		}
		
		private void detach_MusicMix(MusicMix entity)
		{
			this.SendPropertyChanging();
			entity.Album = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlbumType")]
	public partial class AlbumType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _albTypeId;
		
		private string _albTypeName;
		
		private EntitySet<Album> _Album;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnalbTypeIdChanging(System.Guid value);
    partial void OnalbTypeIdChanged();
    partial void OnalbTypeNameChanging(string value);
    partial void OnalbTypeNameChanged();
    #endregion
		
		public AlbumType()
		{
			this._Album = new EntitySet<Album>(new Action<Album>(this.attach_Album), new Action<Album>(this.detach_Album));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albTypeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid albTypeId
		{
			get
			{
				return this._albTypeId;
			}
			set
			{
				if ((this._albTypeId != value))
				{
					this.OnalbTypeIdChanging(value);
					this.SendPropertyChanging();
					this._albTypeId = value;
					this.SendPropertyChanged("albTypeId");
					this.OnalbTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albTypeName", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string albTypeName
		{
			get
			{
				return this._albTypeName;
			}
			set
			{
				if ((this._albTypeName != value))
				{
					this.OnalbTypeNameChanging(value);
					this.SendPropertyChanging();
					this._albTypeName = value;
					this.SendPropertyChanged("albTypeName");
					this.OnalbTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlbumType_Album", Storage="_Album", ThisKey="albTypeId", OtherKey="albTypeId")]
		public EntitySet<Album> Album
		{
			get
			{
				return this._Album;
			}
			set
			{
				this._Album.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Album(Album entity)
		{
			this.SendPropertyChanging();
			entity.AlbumType = this;
		}
		
		private void detach_Album(Album entity)
		{
			this.SendPropertyChanging();
			entity.AlbumType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artist")]
	public partial class Artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _artId;
		
		private string _artName;
		
		private System.Guid _artCountryId;
		
		private string _artPhotoUrl;
		
		private EntitySet<Album> _Album;
		
		private EntitySet<Song> _Song;
		
		private EntitySet<MusicMix> _MusicMix;
		
		private EntityRef<Country> _Country;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnartIdChanging(System.Guid value);
    partial void OnartIdChanged();
    partial void OnartNameChanging(string value);
    partial void OnartNameChanged();
    partial void OnartCountryIdChanging(System.Guid value);
    partial void OnartCountryIdChanged();
    partial void OnartPhotoUrlChanging(string value);
    partial void OnartPhotoUrlChanged();
    #endregion
		
		public Artist()
		{
			this._Album = new EntitySet<Album>(new Action<Album>(this.attach_Album), new Action<Album>(this.detach_Album));
			this._Song = new EntitySet<Song>(new Action<Song>(this.attach_Song), new Action<Song>(this.detach_Song));
			this._MusicMix = new EntitySet<MusicMix>(new Action<MusicMix>(this.attach_MusicMix), new Action<MusicMix>(this.detach_MusicMix));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_artId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid artId
		{
			get
			{
				return this._artId;
			}
			set
			{
				if ((this._artId != value))
				{
					this.OnartIdChanging(value);
					this.SendPropertyChanging();
					this._artId = value;
					this.SendPropertyChanged("artId");
					this.OnartIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_artName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string artName
		{
			get
			{
				return this._artName;
			}
			set
			{
				if ((this._artName != value))
				{
					this.OnartNameChanging(value);
					this.SendPropertyChanging();
					this._artName = value;
					this.SendPropertyChanged("artName");
					this.OnartNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_artCountryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid artCountryId
		{
			get
			{
				return this._artCountryId;
			}
			set
			{
				if ((this._artCountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnartCountryIdChanging(value);
					this.SendPropertyChanging();
					this._artCountryId = value;
					this.SendPropertyChanged("artCountryId");
					this.OnartCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_artPhotoUrl", DbType="VarChar(MAX)")]
		public string artPhotoUrl
		{
			get
			{
				return this._artPhotoUrl;
			}
			set
			{
				if ((this._artPhotoUrl != value))
				{
					this.OnartPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._artPhotoUrl = value;
					this.SendPropertyChanged("artPhotoUrl");
					this.OnartPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Album", Storage="_Album", ThisKey="artId", OtherKey="albArtistId")]
		public EntitySet<Album> Album
		{
			get
			{
				return this._Album;
			}
			set
			{
				this._Album.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Song", Storage="_Song", ThisKey="artId", OtherKey="songArtistId")]
		public EntitySet<Song> Song
		{
			get
			{
				return this._Song;
			}
			set
			{
				this._Song.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_MusicMix", Storage="_MusicMix", ThisKey="artId", OtherKey="musicMixArtistId")]
		public EntitySet<MusicMix> MusicMix
		{
			get
			{
				return this._MusicMix;
			}
			set
			{
				this._MusicMix.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Artist", Storage="_Country", ThisKey="artCountryId", OtherKey="countryId", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Artist.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Artist.Add(this);
						this._artCountryId = value.countryId;
					}
					else
					{
						this._artCountryId = default(System.Guid);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Album(Album entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Album(Album entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
		
		private void attach_Song(Song entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Song(Song entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
		
		private void attach_MusicMix(MusicMix entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_MusicMix(MusicMix entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _countryId;
		
		private string _countryName;
		
		private EntitySet<Artist> _Artist;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncountryIdChanging(System.Guid value);
    partial void OncountryIdChanged();
    partial void OncountryNameChanging(string value);
    partial void OncountryNameChanged();
    #endregion
		
		public Country()
		{
			this._Artist = new EntitySet<Artist>(new Action<Artist>(this.attach_Artist), new Action<Artist>(this.detach_Artist));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid countryId
		{
			get
			{
				return this._countryId;
			}
			set
			{
				if ((this._countryId != value))
				{
					this.OncountryIdChanging(value);
					this.SendPropertyChanging();
					this._countryId = value;
					this.SendPropertyChanged("countryId");
					this.OncountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string countryName
		{
			get
			{
				return this._countryName;
			}
			set
			{
				if ((this._countryName != value))
				{
					this.OncountryNameChanging(value);
					this.SendPropertyChanging();
					this._countryName = value;
					this.SendPropertyChanged("countryName");
					this.OncountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Artist", Storage="_Artist", ThisKey="countryId", OtherKey="artCountryId")]
		public EntitySet<Artist> Artist
		{
			get
			{
				return this._Artist;
			}
			set
			{
				this._Artist.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Artist(Artist entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Artist(Artist entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _genreId;
		
		private string _genreName;
		
		private EntitySet<Album> _Album;
		
		private EntitySet<MusicMix> _MusicMix;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngenreIdChanging(System.Guid value);
    partial void OngenreIdChanged();
    partial void OngenreNameChanging(string value);
    partial void OngenreNameChanged();
    #endregion
		
		public Genre()
		{
			this._Album = new EntitySet<Album>(new Action<Album>(this.attach_Album), new Action<Album>(this.detach_Album));
			this._MusicMix = new EntitySet<MusicMix>(new Action<MusicMix>(this.attach_MusicMix), new Action<MusicMix>(this.detach_MusicMix));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid genreId
		{
			get
			{
				return this._genreId;
			}
			set
			{
				if ((this._genreId != value))
				{
					this.OngenreIdChanging(value);
					this.SendPropertyChanging();
					this._genreId = value;
					this.SendPropertyChanged("genreId");
					this.OngenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string genreName
		{
			get
			{
				return this._genreName;
			}
			set
			{
				if ((this._genreName != value))
				{
					this.OngenreNameChanging(value);
					this.SendPropertyChanging();
					this._genreName = value;
					this.SendPropertyChanged("genreName");
					this.OngenreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Album", Storage="_Album", ThisKey="genreId", OtherKey="albGenreId")]
		public EntitySet<Album> Album
		{
			get
			{
				return this._Album;
			}
			set
			{
				this._Album.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MusicMix", Storage="_MusicMix", ThisKey="genreId", OtherKey="musicMixGenreId")]
		public EntitySet<MusicMix> MusicMix
		{
			get
			{
				return this._MusicMix;
			}
			set
			{
				this._MusicMix.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Album(Album entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_Album(Album entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
		
		private void attach_MusicMix(MusicMix entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_MusicMix(MusicMix entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabelName")]
	public partial class LabelName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _labelId;
		
		private string _labelName1;
		
		private EntitySet<Album> _Album;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlabelIdChanging(System.Guid value);
    partial void OnlabelIdChanged();
    partial void OnlabelName1Changing(string value);
    partial void OnlabelName1Changed();
    #endregion
		
		public LabelName()
		{
			this._Album = new EntitySet<Album>(new Action<Album>(this.attach_Album), new Action<Album>(this.detach_Album));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_labelId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid labelId
		{
			get
			{
				return this._labelId;
			}
			set
			{
				if ((this._labelId != value))
				{
					this.OnlabelIdChanging(value);
					this.SendPropertyChanging();
					this._labelId = value;
					this.SendPropertyChanged("labelId");
					this.OnlabelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="labelName", Storage="_labelName1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string labelName1
		{
			get
			{
				return this._labelName1;
			}
			set
			{
				if ((this._labelName1 != value))
				{
					this.OnlabelName1Changing(value);
					this.SendPropertyChanging();
					this._labelName1 = value;
					this.SendPropertyChanged("labelName1");
					this.OnlabelName1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabelName_Album", Storage="_Album", ThisKey="labelId", OtherKey="albLabelId")]
		public EntitySet<Album> Album
		{
			get
			{
				return this._Album;
			}
			set
			{
				this._Album.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Album(Album entity)
		{
			this.SendPropertyChanging();
			entity.LabelName = this;
		}
		
		private void detach_Album(Album entity)
		{
			this.SendPropertyChanging();
			entity.LabelName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Song")]
	public partial class Song : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _songId;
		
		private System.Guid _songArtistId;
		
		private System.Guid _songAlbumId;
		
		private string _songName;
		
		private EntitySet<MusicMix> _MusicMix;
		
		private EntityRef<Album> _Album;
		
		private EntityRef<Artist> _Artist;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsongIdChanging(System.Guid value);
    partial void OnsongIdChanged();
    partial void OnsongArtistIdChanging(System.Guid value);
    partial void OnsongArtistIdChanged();
    partial void OnsongAlbumIdChanging(System.Guid value);
    partial void OnsongAlbumIdChanged();
    partial void OnsongNameChanging(string value);
    partial void OnsongNameChanged();
    #endregion
		
		public Song()
		{
			this._MusicMix = new EntitySet<MusicMix>(new Action<MusicMix>(this.attach_MusicMix), new Action<MusicMix>(this.detach_MusicMix));
			this._Album = default(EntityRef<Album>);
			this._Artist = default(EntityRef<Artist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_songId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid songId
		{
			get
			{
				return this._songId;
			}
			set
			{
				if ((this._songId != value))
				{
					this.OnsongIdChanging(value);
					this.SendPropertyChanging();
					this._songId = value;
					this.SendPropertyChanged("songId");
					this.OnsongIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_songArtistId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid songArtistId
		{
			get
			{
				return this._songArtistId;
			}
			set
			{
				if ((this._songArtistId != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsongArtistIdChanging(value);
					this.SendPropertyChanging();
					this._songArtistId = value;
					this.SendPropertyChanged("songArtistId");
					this.OnsongArtistIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_songAlbumId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid songAlbumId
		{
			get
			{
				return this._songAlbumId;
			}
			set
			{
				if ((this._songAlbumId != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsongAlbumIdChanging(value);
					this.SendPropertyChanging();
					this._songAlbumId = value;
					this.SendPropertyChanged("songAlbumId");
					this.OnsongAlbumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_songName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string songName
		{
			get
			{
				return this._songName;
			}
			set
			{
				if ((this._songName != value))
				{
					this.OnsongNameChanging(value);
					this.SendPropertyChanging();
					this._songName = value;
					this.SendPropertyChanged("songName");
					this.OnsongNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_MusicMix", Storage="_MusicMix", ThisKey="songId", OtherKey="musicMixSongId")]
		public EntitySet<MusicMix> MusicMix
		{
			get
			{
				return this._MusicMix;
			}
			set
			{
				this._MusicMix.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_Song", Storage="_Album", ThisKey="songAlbumId", OtherKey="albId", IsForeignKey=true)]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.Song.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.Song.Add(this);
						this._songAlbumId = value.albId;
					}
					else
					{
						this._songAlbumId = default(System.Guid);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Song", Storage="_Artist", ThisKey="songArtistId", OtherKey="artId", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Song.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Song.Add(this);
						this._songArtistId = value.artId;
					}
					else
					{
						this._songArtistId = default(System.Guid);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MusicMix(MusicMix entity)
		{
			this.SendPropertyChanging();
			entity.Song = this;
		}
		
		private void detach_MusicMix(MusicMix entity)
		{
			this.SendPropertyChanging();
			entity.Song = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MusicMix")]
	public partial class MusicMix : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _musicMixSongPositionId;
		
		private System.Guid _musicMixSongId;
		
		private System.Guid _musicMixGenreId;
		
		private System.Guid _musicMixUserId;
		
		private System.Guid _musicMixAlbumId;
		
		private System.Guid _musicMixArtistId;
		
		private EntityRef<Album> _Album;
		
		private EntityRef<Artist> _Artist;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Song> _Song;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmusicMixSongPositionIdChanging(System.Guid value);
    partial void OnmusicMixSongPositionIdChanged();
    partial void OnmusicMixSongIdChanging(System.Guid value);
    partial void OnmusicMixSongIdChanged();
    partial void OnmusicMixGenreIdChanging(System.Guid value);
    partial void OnmusicMixGenreIdChanged();
    partial void OnmusicMixUserIdChanging(System.Guid value);
    partial void OnmusicMixUserIdChanged();
    partial void OnmusicMixAlbumIdChanging(System.Guid value);
    partial void OnmusicMixAlbumIdChanged();
    partial void OnmusicMixArtistIdChanging(System.Guid value);
    partial void OnmusicMixArtistIdChanged();
    #endregion
		
		public MusicMix()
		{
			this._Album = default(EntityRef<Album>);
			this._Artist = default(EntityRef<Artist>);
			this._Genre = default(EntityRef<Genre>);
			this._Song = default(EntityRef<Song>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicMixSongPositionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid musicMixSongPositionId
		{
			get
			{
				return this._musicMixSongPositionId;
			}
			set
			{
				if ((this._musicMixSongPositionId != value))
				{
					this.OnmusicMixSongPositionIdChanging(value);
					this.SendPropertyChanging();
					this._musicMixSongPositionId = value;
					this.SendPropertyChanged("musicMixSongPositionId");
					this.OnmusicMixSongPositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicMixSongId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid musicMixSongId
		{
			get
			{
				return this._musicMixSongId;
			}
			set
			{
				if ((this._musicMixSongId != value))
				{
					if (this._Song.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmusicMixSongIdChanging(value);
					this.SendPropertyChanging();
					this._musicMixSongId = value;
					this.SendPropertyChanged("musicMixSongId");
					this.OnmusicMixSongIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicMixGenreId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid musicMixGenreId
		{
			get
			{
				return this._musicMixGenreId;
			}
			set
			{
				if ((this._musicMixGenreId != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmusicMixGenreIdChanging(value);
					this.SendPropertyChanging();
					this._musicMixGenreId = value;
					this.SendPropertyChanged("musicMixGenreId");
					this.OnmusicMixGenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicMixUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid musicMixUserId
		{
			get
			{
				return this._musicMixUserId;
			}
			set
			{
				if ((this._musicMixUserId != value))
				{
					this.OnmusicMixUserIdChanging(value);
					this.SendPropertyChanging();
					this._musicMixUserId = value;
					this.SendPropertyChanged("musicMixUserId");
					this.OnmusicMixUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicMixAlbumId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid musicMixAlbumId
		{
			get
			{
				return this._musicMixAlbumId;
			}
			set
			{
				if ((this._musicMixAlbumId != value))
				{
					if (this._Album.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmusicMixAlbumIdChanging(value);
					this.SendPropertyChanging();
					this._musicMixAlbumId = value;
					this.SendPropertyChanged("musicMixAlbumId");
					this.OnmusicMixAlbumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicMixArtistId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid musicMixArtistId
		{
			get
			{
				return this._musicMixArtistId;
			}
			set
			{
				if ((this._musicMixArtistId != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmusicMixArtistIdChanging(value);
					this.SendPropertyChanging();
					this._musicMixArtistId = value;
					this.SendPropertyChanged("musicMixArtistId");
					this.OnmusicMixArtistIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Album_MusicMix", Storage="_Album", ThisKey="musicMixAlbumId", OtherKey="albId", IsForeignKey=true)]
		public Album Album
		{
			get
			{
				return this._Album.Entity;
			}
			set
			{
				Album previousValue = this._Album.Entity;
				if (((previousValue != value) 
							|| (this._Album.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Album.Entity = null;
						previousValue.MusicMix.Remove(this);
					}
					this._Album.Entity = value;
					if ((value != null))
					{
						value.MusicMix.Add(this);
						this._musicMixAlbumId = value.albId;
					}
					else
					{
						this._musicMixAlbumId = default(System.Guid);
					}
					this.SendPropertyChanged("Album");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_MusicMix", Storage="_Artist", ThisKey="musicMixArtistId", OtherKey="artId", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.MusicMix.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.MusicMix.Add(this);
						this._musicMixArtistId = value.artId;
					}
					else
					{
						this._musicMixArtistId = default(System.Guid);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MusicMix", Storage="_Genre", ThisKey="musicMixGenreId", OtherKey="genreId", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.MusicMix.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.MusicMix.Add(this);
						this._musicMixGenreId = value.genreId;
					}
					else
					{
						this._musicMixGenreId = default(System.Guid);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_MusicMix", Storage="_Song", ThisKey="musicMixSongId", OtherKey="songId", IsForeignKey=true)]
		public Song Song
		{
			get
			{
				return this._Song.Entity;
			}
			set
			{
				Song previousValue = this._Song.Entity;
				if (((previousValue != value) 
							|| (this._Song.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Song.Entity = null;
						previousValue.MusicMix.Remove(this);
					}
					this._Song.Entity = value;
					if ((value != null))
					{
						value.MusicMix.Add(this);
						this._musicMixSongId = value.songId;
					}
					else
					{
						this._musicMixSongId = default(System.Guid);
					}
					this.SendPropertyChanged("Song");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _usrId;
		
		private string _usrName;
		
		private string _usrPswd;
		
		private byte _usrOnline;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusrIdChanging(System.Guid value);
    partial void OnusrIdChanged();
    partial void OnusrNameChanging(string value);
    partial void OnusrNameChanged();
    partial void OnusrPswdChanging(string value);
    partial void OnusrPswdChanged();
    partial void OnusrOnlineChanging(byte value);
    partial void OnusrOnlineChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usrId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid usrId
		{
			get
			{
				return this._usrId;
			}
			set
			{
				if ((this._usrId != value))
				{
					this.OnusrIdChanging(value);
					this.SendPropertyChanging();
					this._usrId = value;
					this.SendPropertyChanged("usrId");
					this.OnusrIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usrName", DbType="VarChar(24) NOT NULL", CanBeNull=false)]
		public string usrName
		{
			get
			{
				return this._usrName;
			}
			set
			{
				if ((this._usrName != value))
				{
					this.OnusrNameChanging(value);
					this.SendPropertyChanging();
					this._usrName = value;
					this.SendPropertyChanged("usrName");
					this.OnusrNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usrPswd", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string usrPswd
		{
			get
			{
				return this._usrPswd;
			}
			set
			{
				if ((this._usrPswd != value))
				{
					this.OnusrPswdChanging(value);
					this.SendPropertyChanging();
					this._usrPswd = value;
					this.SendPropertyChanged("usrPswd");
					this.OnusrPswdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usrOnline", DbType="TinyInt NOT NULL")]
		public byte usrOnline
		{
			get
			{
				return this._usrOnline;
			}
			set
			{
				if ((this._usrOnline != value))
				{
					this.OnusrOnlineChanging(value);
					this.SendPropertyChanging();
					this._usrOnline = value;
					this.SendPropertyChanged("usrOnline");
					this.OnusrOnlineChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OldMusicMix")]
	public partial class OldMusicMix : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _oldMixId;
		
		private System.Guid _oldMixSongId;
		
		private System.Guid _oldMixSongPositionId;
		
		private System.Guid _oldMixUserId;
		
		private int _oldMixIdOfList;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnoldMixIdChanging(System.Guid value);
    partial void OnoldMixIdChanged();
    partial void OnoldMixSongIdChanging(System.Guid value);
    partial void OnoldMixSongIdChanged();
    partial void OnoldMixSongPositionIdChanging(System.Guid value);
    partial void OnoldMixSongPositionIdChanged();
    partial void OnoldMixUserIdChanging(System.Guid value);
    partial void OnoldMixUserIdChanged();
    partial void OnoldMixIdOfListChanging(int value);
    partial void OnoldMixIdOfListChanged();
    #endregion
		
		public OldMusicMix()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oldMixId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid oldMixId
		{
			get
			{
				return this._oldMixId;
			}
			set
			{
				if ((this._oldMixId != value))
				{
					this.OnoldMixIdChanging(value);
					this.SendPropertyChanging();
					this._oldMixId = value;
					this.SendPropertyChanged("oldMixId");
					this.OnoldMixIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oldMixSongId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid oldMixSongId
		{
			get
			{
				return this._oldMixSongId;
			}
			set
			{
				if ((this._oldMixSongId != value))
				{
					this.OnoldMixSongIdChanging(value);
					this.SendPropertyChanging();
					this._oldMixSongId = value;
					this.SendPropertyChanged("oldMixSongId");
					this.OnoldMixSongIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oldMixSongPositionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid oldMixSongPositionId
		{
			get
			{
				return this._oldMixSongPositionId;
			}
			set
			{
				if ((this._oldMixSongPositionId != value))
				{
					this.OnoldMixSongPositionIdChanging(value);
					this.SendPropertyChanging();
					this._oldMixSongPositionId = value;
					this.SendPropertyChanged("oldMixSongPositionId");
					this.OnoldMixSongPositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oldMixUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid oldMixUserId
		{
			get
			{
				return this._oldMixUserId;
			}
			set
			{
				if ((this._oldMixUserId != value))
				{
					this.OnoldMixUserIdChanging(value);
					this.SendPropertyChanging();
					this._oldMixUserId = value;
					this.SendPropertyChanged("oldMixUserId");
					this.OnoldMixUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oldMixIdOfList", DbType="Int NOT NULL")]
		public int oldMixIdOfList
		{
			get
			{
				return this._oldMixIdOfList;
			}
			set
			{
				if ((this._oldMixIdOfList != value))
				{
					this.OnoldMixIdOfListChanging(value);
					this.SendPropertyChanging();
					this._oldMixIdOfList = value;
					this.SendPropertyChanged("oldMixIdOfList");
					this.OnoldMixIdOfListChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Album_View")]
	public partial class Album_View
	{
		
		private System.Guid _albId;
		
		private string _Артист;
		
		private string _Альбом;
		
		private System.DateTime _Дата_выхода;
		
		private string _Тип_альбома;
		
		private string _Жанр;
		
		private string _Лейбл;
		
		public Album_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_albId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid albId
		{
			get
			{
				return this._albId;
			}
			set
			{
				if ((this._albId != value))
				{
					this._albId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Артист", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Артист
		{
			get
			{
				return this._Артист;
			}
			set
			{
				if ((this._Артист != value))
				{
					this._Артист = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Альбом", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Альбом
		{
			get
			{
				return this._Альбом;
			}
			set
			{
				if ((this._Альбом != value))
				{
					this._Альбом = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Дата выхода]", Storage="_Дата_выхода", DbType="Date NOT NULL")]
		public System.DateTime Дата_выхода
		{
			get
			{
				return this._Дата_выхода;
			}
			set
			{
				if ((this._Дата_выхода != value))
				{
					this._Дата_выхода = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Тип альбома]", Storage="_Тип_альбома", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Тип_альбома
		{
			get
			{
				return this._Тип_альбома;
			}
			set
			{
				if ((this._Тип_альбома != value))
				{
					this._Тип_альбома = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Жанр", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Жанр
		{
			get
			{
				return this._Жанр;
			}
			set
			{
				if ((this._Жанр != value))
				{
					this._Жанр = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Лейбл", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Лейбл
		{
			get
			{
				return this._Лейбл;
			}
			set
			{
				if ((this._Лейбл != value))
				{
					this._Лейбл = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Song_View")]
	public partial class Song_View
	{
		
		private System.Guid _sngId;
		
		private string _Название_альбома;
		
		private string _Исполнитель;
		
		private string _Название_песни;
		
		public Song_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sngId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid sngId
		{
			get
			{
				return this._sngId;
			}
			set
			{
				if ((this._sngId != value))
				{
					this._sngId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Название альбома]", Storage="_Название_альбома", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Название_альбома
		{
			get
			{
				return this._Название_альбома;
			}
			set
			{
				if ((this._Название_альбома != value))
				{
					this._Название_альбома = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Исполнитель", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Исполнитель
		{
			get
			{
				return this._Исполнитель;
			}
			set
			{
				if ((this._Исполнитель != value))
				{
					this._Исполнитель = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Название песни]", Storage="_Название_песни", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Название_песни
		{
			get
			{
				return this._Название_песни;
			}
			set
			{
				if ((this._Название_песни != value))
				{
					this._Название_песни = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlbumType_View")]
	public partial class AlbumType_View
	{
		
		private System.Guid _aTypeId;
		
		private string _Тип_альбома;
		
		public AlbumType_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid aTypeId
		{
			get
			{
				return this._aTypeId;
			}
			set
			{
				if ((this._aTypeId != value))
				{
					this._aTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Тип альбома]", Storage="_Тип_альбома", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Тип_альбома
		{
			get
			{
				return this._Тип_альбома;
			}
			set
			{
				if ((this._Тип_альбома != value))
				{
					this._Тип_альбома = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country_View")]
	public partial class Country_View
	{
		
		private System.Guid _cId;
		
		private string _Страна;
		
		public Country_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid cId
		{
			get
			{
				return this._cId;
			}
			set
			{
				if ((this._cId != value))
				{
					this._cId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Страна", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Страна
		{
			get
			{
				return this._Страна;
			}
			set
			{
				if ((this._Страна != value))
				{
					this._Страна = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre_View")]
	public partial class Genre_View
	{
		
		private System.Guid _gId;
		
		private string _Название_жанра;
		
		public Genre_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid gId
		{
			get
			{
				return this._gId;
			}
			set
			{
				if ((this._gId != value))
				{
					this._gId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Название жанра]", Storage="_Название_жанра", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название_жанра
		{
			get
			{
				return this._Название_жанра;
			}
			set
			{
				if ((this._Название_жанра != value))
				{
					this._Название_жанра = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabelName_View")]
	public partial class LabelName_View
	{
		
		private System.Guid _lId;
		
		private string _Название_лейбла;
		
		public LabelName_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid lId
		{
			get
			{
				return this._lId;
			}
			set
			{
				if ((this._lId != value))
				{
					this._lId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Название лейбла]", Storage="_Название_лейбла", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Название_лейбла
		{
			get
			{
				return this._Название_лейбла;
			}
			set
			{
				if ((this._Название_лейбла != value))
				{
					this._Название_лейбла = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.List_View")]
	public partial class List_View
	{
		
		private System.Guid _oMId;
		
		private int _Номер_списка;
		
		private string _Имя_Пользователя;
		
		public List_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oMId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid oMId
		{
			get
			{
				return this._oMId;
			}
			set
			{
				if ((this._oMId != value))
				{
					this._oMId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер списка]", Storage="_Номер_списка", DbType="Int NOT NULL")]
		public int Номер_списка
		{
			get
			{
				return this._Номер_списка;
			}
			set
			{
				if ((this._Номер_списка != value))
				{
					this._Номер_списка = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Имя Пользователя]", Storage="_Имя_Пользователя", DbType="VarChar(24) NOT NULL", CanBeNull=false)]
		public string Имя_Пользователя
		{
			get
			{
				return this._Имя_Пользователя;
			}
			set
			{
				if ((this._Имя_Пользователя != value))
				{
					this._Имя_Пользователя = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MusicMix_View")]
	public partial class MusicMix_View
	{
		
		private System.Guid _mMId;
		
		private string _Песня;
		
		private string _Исполнитель;
		
		private string _Альбом;
		
		private string _Жанр;
		
		public MusicMix_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mMId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid mMId
		{
			get
			{
				return this._mMId;
			}
			set
			{
				if ((this._mMId != value))
				{
					this._mMId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Песня", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Песня
		{
			get
			{
				return this._Песня;
			}
			set
			{
				if ((this._Песня != value))
				{
					this._Песня = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Исполнитель", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Исполнитель
		{
			get
			{
				return this._Исполнитель;
			}
			set
			{
				if ((this._Исполнитель != value))
				{
					this._Исполнитель = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Альбом", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Альбом
		{
			get
			{
				return this._Альбом;
			}
			set
			{
				if ((this._Альбом != value))
				{
					this._Альбом = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Жанр", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Жанр
		{
			get
			{
				return this._Жанр;
			}
			set
			{
				if ((this._Жанр != value))
				{
					this._Жанр = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artist_View")]
	public partial class Artist_View
	{
		
		private System.Guid _artId;
		
		private string _Исполнитель;
		
		private string _Страна;
		
		public Artist_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_artId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid artId
		{
			get
			{
				return this._artId;
			}
			set
			{
				if ((this._artId != value))
				{
					this._artId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Исполнитель", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Исполнитель
		{
			get
			{
				return this._Исполнитель;
			}
			set
			{
				if ((this._Исполнитель != value))
				{
					this._Исполнитель = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Страна", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Страна
		{
			get
			{
				return this._Страна;
			}
			set
			{
				if ((this._Страна != value))
				{
					this._Страна = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
